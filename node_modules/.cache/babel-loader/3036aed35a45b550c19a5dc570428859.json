{"ast":null,"code":"var _jsxFileName = \"/home/ethan/Documents/DevHub/SalaryTemplate/src/Components/SecondDatasetTable.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport SheetsAPIInfo from \"../SheetsAPIInfo.json\";\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"Age\",\n  headerName: \"Age\",\n  width: 130\n}, {\n  field: \"Industry\",\n  headerName: \"Industry\",\n  width: 130\n}, {\n  field: \"Job Title\",\n  headerName: \"Job Title\",\n  width: 130\n}, {\n  field: \"Annual Salary\",\n  headerName: \"Annual Salary\",\n  width: 130\n}, {\n  field: \"Currency\",\n  headerName: \"Currency\",\n  width: 130\n}, {\n  field: \"Work Experience\",\n  headerName: \"Work Experience\",\n  width: 130\n}, {\n  field: \"Context for Job\",\n  headerName: \"Context for Job\",\n  width: 130\n}, {\n  field: \"Other\",\n  headerName: \"Other\",\n  width: 130\n}, {\n  field: \"Other Compensation\",\n  headerName: \"Other Compensation\",\n  width: 130\n}, {\n  field: \"Context\",\n  headerName: \"Context\",\n  width: 130\n}, {\n  field: \"Country\",\n  headerName: \"Country\",\n  width: 130\n}, {\n  field: \"State\",\n  headerName: \"State\",\n  width: 130\n}, {\n  field: \"City\",\n  headerName: \"City\",\n  width: 130\n}, {\n  field: \"Highest Level of Education\",\n  headerName: \"Highest Level of Education\",\n  width: 130\n}, {\n  field: \"Gender\",\n  headerName: \"Gender\",\n  width: 130\n}, {\n  field: \"Race\",\n  headerName: \"Race\",\n  width: 130\n}];\nlet rows = [];\nconst spreadSheet = new GoogleSpreadsheet(\"1xL-FWa7vdAH32MtPPVX688IMmG2y2rE34A_VW7SoZnI\");\nlet isLoaded = false;\n\n_s(async function () {\n  _s();\n\n  try {\n    await spreadSheet.useServiceAccountAuth({\n      client_email: SheetsAPIInfo.client_email,\n      private_key: SheetsAPIInfo.private_key\n    });\n    await spreadSheet.loadInfo();\n    const sheet = spreadSheet.sheetsByIndex[0];\n    rows = await sheet.getRows();\n    isLoaded = true;\n  } catch (e) {\n    console.error(\"Error: \", e);\n  }\n}, \"XzZzjmf42T4ghIIVsLcPZIIQRXQ=\", false, function () {\n  return [spreadSheet.useServiceAccountAuth];\n})();\n\nexport default function TestTable() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 600,\n      width: \"100%\"\n    },\n    children: isLoaded ? /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      getRowId: rows => rows.rowNumber,\n      autoHeight: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_c = TestTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestTable\");","map":{"version":3,"sources":["/home/ethan/Documents/DevHub/SalaryTemplate/src/Components/SecondDatasetTable.js"],"names":["React","DataGrid","CircularProgress","SheetsAPIInfo","GoogleSpreadsheet","columns","field","headerName","width","rows","spreadSheet","isLoaded","useServiceAccountAuth","client_email","private_key","loadInfo","sheet","sheetsByIndex","getRows","e","console","error","TestTable","height","rowNumber"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport SheetsAPIInfo from \"../SheetsAPIInfo.json\";\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nconst columns = [\n  \n  { field: \"Age\", headerName: \"Age\", width: 130 },\n  { field: \"Industry\", headerName: \"Industry\", width: 130 },\n  { field: \"Job Title\", headerName: \"Job Title\", width: 130 },\n  { field: \"Annual Salary\", headerName: \"Annual Salary\", width: 130 },\n  { field: \"Currency\", headerName: \"Currency\", width: 130 },\n  { field: \"Work Experience\", headerName: \"Work Experience\", width: 130 },\n  { field: \"Context for Job\", headerName: \"Context for Job\", width: 130 },\n  { field: \"Other\", headerName: \"Other\", width: 130 },\n  { field: \"Other Compensation\", headerName: \"Other Compensation\", width: 130 },\n  { field: \"Context\", headerName: \"Context\", width: 130 },\n  { field: \"Country\", headerName: \"Country\", width: 130 },\n  { field: \"State\", headerName: \"State\", width: 130 },\n  { field: \"City\", headerName: \"City\", width: 130 },\n  { field: \"Highest Level of Education\", headerName: \"Highest Level of Education\", width: 130 },\n  { field: \"Gender\", headerName: \"Gender\", width: 130 },\n  { field: \"Race\", headerName: \"Race\", width: 130 },\n];\n\nlet rows = [];\n\nconst spreadSheet = new GoogleSpreadsheet(\n  \"1xL-FWa7vdAH32MtPPVX688IMmG2y2rE34A_VW7SoZnI\"\n);\n\nlet isLoaded = false;\n\n(async function () {\n  try {\n    await spreadSheet.useServiceAccountAuth({\n      client_email: SheetsAPIInfo.client_email,\n      private_key: SheetsAPIInfo.private_key,\n    });\n\n    await spreadSheet.loadInfo();\n    const sheet = spreadSheet.sheetsByIndex[0];\n    rows = await sheet.getRows();\n    isLoaded = true;\n  } catch (e) {\n    console.error(\"Error: \", e);\n  }\n})();\n\nexport default function TestTable() {\n  return (\n    <div style={{ height: 600, width: \"100%\" }}>\n      {isLoaded ? (\n        <DataGrid\n          rows={rows}\n          columns={columns}\n          getRowId={(rows) => rows.rowNumber}\n          autoHeight={true}\n        />\n      ) : (\n        <CircularProgress />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}